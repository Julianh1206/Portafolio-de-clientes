# Para diseñar estructuras de datos que almacenen la información de clientes y sus portafolios de inversión, es importante tener 
# en cuenta varios aspectos claves para asegurar un rendimiento óptimo y una fácil gestión de la información por parte de cualquier
# persona con acceso a la información. A continuación, se presenta un enfoque para bases de datos relacionales (SQL).

# Siendo así, se mostrará el código fuente con sus respectivos comentarios y explicación en caso de ser necesario.

## creación de la base de datos:
CREATE DATABASE portafolio_de_clientes;
USE portafolio_de_clientes;

## creación de tablas necesarias:


# creación de la tabla segmentos con sus respectivas clasificaciones de clientes: 
CREATE TABLE segmentos(
  id_segmento INT PRIMARY KEY, -- clave primaria (identificador único de cada segmento)
  segmento VARCHAR(255) -- nombre descriptivo del segmento
)
## esta tabla se hace con el fin de definir la clasficación para cada cliente


# creación de la tabla clientes: 
CREATE TABLE clientes(
  id_cliente INT PRIMARY KEY AUTO_INCREMENT, -- clave primaria (identificador único del cliente) 
  nombre VARCHAR(100),
  apellidos VARCHAR(100),
  fecha_nacimiento DATE,
  email VARCHAR(100),
  telefono VARCHAR(100),
  direccion VARCHAR(150),
  id_segmento INT,  -- Identificador del segmento al que pertenece el cliente
  FOREIGN KEY (id_segmento) REFERENCES segmentos(id_segmento)  -- Clave foránea referenciando y relacionar directamente la tabla Segmentos
);
## Esta tabla contiene información básica sobre los clientes, incluyendo sus datos personales y el segmento al que pertenecen.
## Contiene variables como el id_cliente, nombre, apellidos, dirección, entre otras variables de interés. 


# creación de la tabla portafolios:
CREATE TABLE portafolios(
  id_portafolio INT PRIMARY KEY, -- clave primaria (identificador único de cada portafolio)
  id_cliente INT, -- identificación única de cada cliente 
  nombre_portafolio VARCHAR(255) -- nombre descriptivo del portafolio
  fecha_apertura DATE, -- fecha de apertura del portafolio
  estado VERCHAR(50), -- estado del portafolio (vigente o no vigente)
  FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente) -- clave foranea para relacionar directamente con la tabla de clientes
);
## esta tabla portafolios contiene información sobre los portafonlios de inversión de cada cliente, conectando directamente 
## con la tabla de la información básica de los clientes.


# almacena la información de las inversiones individuales dentro de cada portafolio
CREATE TABLE inversiones(
  id_inversion INT PRIMARY KEY,  -- clave primaria (identificador único de cada inversión)
  id_portafolio INT, -- identificador único de cada portafolio
  nombre_inversion VARCHAR(100), -- nombre descriptivo de la inversión
  tipo_inversion VARCHAR(50), -- es útil para categorizar las inversiones (por ejemplo, acciones, bonos, fondos mutuos, etc)
  valor DECIMAL(10,2), --  esto es crucial para calcular el valor total del portafolio y para realizar análisis financieros
  fecha_inversion DATE, -- fecha en que se realizó la inversión
  FOREIGN KEY (id_portafolio) REFERENCES portafolios(id_portafolio)  -- clave foranea para relacionar directamente con la tabla de portafolios.
);
## esta tabla de inversiones permitirá un seguimiento detallado de cada inversión realizada en cada portafolio, 
## facilitando la gestión y el análisis de los portafolios de inversión.


# creación de tabla de categorias de activos: 
CREATE TABLE cat_activos(
  id_categoria INT PRIMARY KEY AUTO_INCREMENT, -- clave primaria (identificador único de cada categoría de activos)
  nombre_categoria VARCHAR(255), -- descripción de la categoria
  comision_diaria DECIMAL(5,4) -- comisión diaria proporcional al monto invertido
)
## esta tabla se crea con el fin de facilitar el seguimiento detallado de cada categoría de activos, además, permite calcular 
## fácilmente las comisiones diarias basadas en la categoría de cada activo financiero.


# creación de tabla de activos 
CREATE TABLE activos(
  id_activo INT PRIMARY KEY AUTO_INCREMENT, -- clave primaria (identificador único de cada activo)
  tipo_activo VARCHAR(255), -- casificación del tipo de activo (por ejemplo: "Acciones", "Bonos", etc)
  descripcion VARCHAR(255), -- descripción del activo
  id_categoria INT, -- identificador de la categoría del activo
  FOREIGN KEY (id_categoria) REFERENCES cat_activos(id_categoria) -- clave foranea para relacionar directamente con la tabla de portafolios.
);
## esta tabla permite llevar un mejor control sobre cada activo financiero disponible para inversión


# creación de la tabla comp_porta (composición de portafolios):
CREATE TABLE comp_porta(
  id_composicion INT PRIMARY KEY AUTO_INCREMENT, -- clave primaria (identificador único de cada composición)
  id_portafolio INT, -- identificador del portafoleo 
  id_activo INT, -- identificador de activo
  cantidad_activo DECIMAL(10,2), -- cantidad del activo en el portafolio
  FOREIGN KEY (id_portafolio) REFERENCES portafolios(id_portafolio), -- clave foranea para relacionar directamente con la tabla de portafolios.
  FOREIGN KEY (id_activo) REFERENCES activos(id_activo)  -- clave foranea para relacionar directamente con la tabla de activos.
);
# creación de tabla de composición de portafolios con el fin de relacionar con los activos, es decir, detallando qué 
# activos y en qué cantidad componen cada portafolio


# creación de la tabla de operaciones de activos:
CREATE TABLE operaciones(
  id_operacion INT PRIMARY KEY AUTO_INCREMENT, -- clave primaria (identificador único de cada operación)
  id_portafolio INT, -- identificador del portafoleo 
  id_activo INT, -- identificador de activo
  Tipo_operacion ENUM('Apertura', 'Adición', 'Retiro', 'Cancelación'), --  tipo de operación ("Apertura", "Adición", "Retiro", "Cancelación")
  fecha_opracion DATE, -- fecha en la que se realizó la operación
  cantidad DECIMAL(10,2), -- cantidad del activo en movimiento con la operación
  FOREIGN KEY (id_portafolio) REFERENCES portafolios(id_portafolio), -- clave foranea para relacionar directamente con la tabla de portafolios.
  FOREIGN KEY (id_activo) REFERENCES activos(id_activo) -- clave foranea para relacionar directamente con la tabla de activos.
);
## esta tabla almacena las operaciones realizadas en los activos dentro de los portafolios.



# creación de la tabla para el control y cálculo de comisiones: 
CREATE TABLE comisiones(
  id_comision INT PRIMEY KEY AUTO_INCREMENT, -- clave primaria (identificador único de cada comisión)
  id_composicion INT, -- identificador único de la composición
  fecha DATE, -- fecha de cálculo de la comisión
  monto_comision DECIMAL(15,2), -- monto de la comisión calculada
  FOREIGN KEY (id_composicion) REFERENCES comp_porta(id_composicion) -- clave foranea para relacionar directamente con la tabla de composición de portafoleos.
);


# creación de estado del portafolio en vigente o no vigente 
SELECT p.id_portafolio,
       p.nombre_portafolio,
       CASE 
          WHEN EXISTS(SELECT 1
                      FROM comp_porta cp
                      WHERE cp.id_portafolio = p.id_portafolio
                      AND cp.cantidad_activo > 0) 
          THEN 'Vigente'
          ELSE 'No vigente'
      END AS estado
FROM portafolios p;




# Ahora, generando información sintética para las estructuras de datos propuestas anteriormente:

## 1. Número de clientes por mes con al menos un portafolio activo.
SELECT DATE_FORMAT(p.fecha_apertura, '%Y,%m') AS mes, -- extrae el año y el mes de la fecha de apertura del portafolio para agrupar por mes 
       COUNT(DISTINT p.id_cliente) AS numero_de_clientes -- número de clientes distintos en la tabla 
FROM portafolios p -- especificación de la tabla 
WHERE p.estado = 'Vigente' -- filtración de portafolios en estado 'Vigente'
GROUP BY DATE_FORMAT(p.fecha_apertura, '%Y-%m') -- se agrupan los resultados de la consulta por año-mes de la fecha de apertura
ORDER BY mes; -- se ordena la tabla de resultados por mes


## 2. Número promedio de cancelaciones de portafolios por mes.
## Para ello primero se procede a contar e identificar las cancelaciones por mes:
SELECT DATE_FORMAT(o.fecha_opracion, '%Y-%m') AS mes, -- se formatea la fecha de operación para extraer el año y el mes.
       COUNT(o.id_operacion) AS numero_de_cancelaciones -- se cuentas las operaciones de cancelación
FROM operaciones o -- se especifica que es la tabla de operaciones de donde se saca la información 
WHERE o.Tipo_operacion = 'Cancelación' -- se filtran solamente las operaciones de tipo 'Cancelación'
GROUP BY DATE_FORMAT(o.fecha_opracion, '%Y-%m') -- se agrupan las cancelaciones por mes
ORDER BY mes; -- se ordenan los resultados de la consulta por mes

## luego, se procede a calcular el promedio mensual de las cancelaciones
SELECT AVG(mensual.numero_de_cancelaciones) AS promedio_mensual_cancelaciones
FROM (SELECT DATE_FORMAT(o.fecha_opracion, '%Y-%m') AS mes,
       COUNT(o.id_operacion) AS numero_de_cancelaciones
       FROM operaciones o
       WHERE o.Tipo_operacion = 'Cancelación'
       GROUP BY DATE_FORMAT(o.fecha_opracion, '%Y-%m')
) AS mensual;











GENERALIDADES:
tipos de datos 
claves primarias 
claves foraneas 








