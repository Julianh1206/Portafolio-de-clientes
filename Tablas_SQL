# Para almacenar la información de los clientes se podría pensar en varias tablas con diferentes estructuras:

## creación de la base de datos:
CREATE DATABASE portafolio_de_clientes;
USE portafolio_de_clientes;

## creación de tablas necesarias:

# creación de tabla con información básica de los clientes:
CREATE TABLE clientes(
  id_cliente INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100),
  apellido VARCHAR(100),
  fecha_nacimiento DATE,
  email VARCHAR(100),
  telefono VARCHAR(100),
  direccion VARCHAR(150),
  id_segmento INT,
  FOREIGN KEY (id_segmento) REFERENCES segmentos(id_segmento)
);

# creación de la tabla con información de segmentos a los que puedan pertenecer los clientes: 
CREATE TABLE segmentos(
  id_segmento INT PRIMARY KEY,
  segmento VARCHAR(255)
)

# creación de tabla de portafolios donde se almacena la información de los portafolios de inversión de cada cliente:
CREATE TABLE portafolios(
  id_portafolio INT PRIMARY KEY,
  id_cliente INT,
  nombre_portafolio VARCHAR(255)
  tipo_inversion VARCHAR(50),
  valor DECIMAL(10,2),
  fecha_inicio DATE,
  fecha_final DATE,
  FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente)
);


# almacena la información de las inversiones individuales dentro de cada portafolio
CREATE TABLE inversiones(
  id_inversion INT PRIMARY KEY,
  id_portafolio INT,
  nombre_inversion VARCHAR(100),
  tipo_inversion VARCHAR(50),
  valor DECIMAL(10,2), 
  fecha_inversion DATE,
  FOREIGN KEY (id_portafolio) REFERENCES portafolios(id_portafolio)
);

# creación de tabla de activos 
CREATE TABLE activos(
  id_activo INT PRIMARY KEY AUTO_INCREMENT,
  tipo_activo VARCHAR(255),
  descripcion VARCHAR(255)
);

# creación de tabla de categorias de activos: 
CREATE TABLE cat_activos(
  id_categoria INT PRIMARY KEY AUTO_INCREMENT,
  nombre_categoria VARCHAR(255),
  comision_diaria DECIMAL(5,4) -- comisión diaria proporcional al monto invertido
)

# creación de tabla de composición de portafolios con el fin de relacionar con los activos, es decir, 
# detallando qué activos y en qué cantidad componen cada portafolio:
CREATE TABLE comp_porta(
  id_composicion INT PRIMARY KEY AUTO_INCREMENT, 
  id_portafolio INT, 
  id_activo INT, 
  cantidad_activo DECIMAL(10,2),
  FOREIGN KEY (id_portafolio) REFERENCES portafolios(id_portafolio),
  FOREIGN KEY (id_activo) REFERENCES activos(id_activo)  
);

# creación de tabla de operaciones de los activos dentro de los portafolios:
CREATE TABLE operaciones(
  id_operacion INT PRIMARY KEY AUTO_INCREMENT,
  id_portafolio INT, 
  id_activo INT, 
  Tipo_operacion ENUM('Apertura', 'Adición', 'Retiro', 'Cancelación'),
  fecha_opracion DATE,
  cantidad DECIMAL(10,2),
  FOREIGN KEY (id_portafolio) REFERENCES portafolios(id_portafolio),
  FOREIGN KEY (id_activo) REFERENCES activos(id_activo) 
);

# creación de la tabla para el control de comisiones: 
CREATE TABLE comisiones(
  id_comision INT PRIMEY KEY AUTO_INCREMENT,
  id_composicion INT,
  fecha DATE, 
  monto_comision DECIMAL(15,2),
  FOREIGN KEY (id_composicion) REFERENCES comp_porta(id_composicion)
);


# creación de estado del portafolio en vigente o no vigente 
SELECT p.id_portafolio,
       p.nombre_portafolio,
       CASE 
          WHEN EXISTS(SELECT 1
                      FROM comp_porta cp
                      WHERE cp.id_portafolio = p.id_portafolio
                      AND cp.cantidad_activo > 0) 
          THEN 'Vigente'
          ELSE 'No vigente'
      END AS estado
FROM portafolios p;














